import uuid
from typing import List
from sqlalchemy import Column, String, Boolean, DateTime
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.sql import func
from sqlalchemy.orm import mapped_column, Mapped, relationship

from app.db.base_class import Base

class User(Base):
    # __tablename__ = "users" # Automatically generated by Base class

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    email: Mapped[str] = mapped_column(String(length=320), unique=True, index=True, nullable=False)
    hashed_password: Mapped[str] = mapped_column(String(length=1024), nullable=False)
    is_active: Mapped[bool] = mapped_column(Boolean, default=True)
    created_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), server_default=func.now())
    updated_at: Mapped[DateTime] = mapped_column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())

    # Add the relationship to Task
    tasks: Mapped[List["Task"]] = relationship("Task", back_populates="owner", order_by="Task.due_date")

    # Add __repr__ for better debugging representation if needed
    def __repr__(self):
        return f"<User(id={self.id!r}, email={self.email!r}, is_active={self.is_active!r})>"
